"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const metrics_1 = require("../../src/features/metrics");
const utils_1 = require("../fixtures/utils");
const child_process_1 = require("child_process");
describe('Metrics', () => {
    describe('init', () => {
        it('should init metrics', () => {
            const metric = new metrics_1.default();
            let metrics = metric.init();
            chai_1.expect(metrics.hasOwnProperty('meter')).to.equal(true);
            chai_1.expect(metrics.hasOwnProperty('histogram')).to.equal(true);
            chai_1.expect(metrics.hasOwnProperty('counter')).to.equal(true);
            chai_1.expect(metrics.hasOwnProperty('metric')).to.equal(true);
            metric.destroy();
        });
    });
    describe('deleteMetric', () => {
        it('should delete a single metric', () => {
            const metric = new metrics_1.default();
            metric.meter({ name: 'test', unit: 'mb' });
            metric.histogram({ name: 'test2' });
            chai_1.expect(metric._getVar().get('test2').value()).to.equal('0');
            chai_1.expect(metric._getVar().get('test').value()).to.equal('0mb');
            chai_1.expect(metric._getVar().size).to.equal(2);
            metric.deleteMetric('test2');
            chai_1.expect(metric._getVar().get('test').value()).to.equal('0mb');
            chai_1.expect(metric._getVar().get('test2')).to.equal(undefined);
            chai_1.expect(metric._getVar().size).to.equal(1);
            metric.destroy();
        });
    });
    describe('meter', () => {
        it('should return undefined if no name provided', () => {
            const metric = new metrics_1.default();
            const meter = metric.meter({ tickInterval: 50 });
            chai_1.expect(meter).to.equal(undefined);
            metric.destroy();
        });
        it('should calculate a meter', (done) => {
            const metric = new metrics_1.default();
            const meter = metric.meter({ name: 'test', tickInterval: 50 });
            if (!meter) {
                chai_1.assert.fail();
                return;
            }
            chai_1.expect(meter.val()).to.equal(0);
            setTimeout(function () {
                chai_1.expect(meter.val()).to.equal(0);
                metric.destroy();
                done();
            }, 60);
        });
        it('should calculate a meter after mark', (done) => {
            const metric = new metrics_1.default();
            const meter = metric.meter({ name: 'test', tickInterval: 50 });
            if (!meter) {
                chai_1.assert.fail();
                return;
            }
            chai_1.expect(meter.val()).to.equal(0);
            meter.mark(10);
            setTimeout(function () {
                chai_1.expect(meter.val()).to.equal(0.17);
                metric.destroy();
                done();
            }, 60);
        });
    });
    describe('counter', () => {
        it('should return undefined if no name provided', () => {
            const metric = new metrics_1.default();
            const counter = metric.counter({});
            chai_1.expect(counter).to.equal(undefined);
            metric.destroy();
        });
        it('should calculate a meter', () => {
            const metric = new metrics_1.default();
            const counter = metric.counter({ name: 'test' });
            if (!counter) {
                chai_1.assert.fail();
                return;
            }
            chai_1.expect(counter.val()).to.equal(0);
            counter.inc();
            chai_1.expect(counter.val()).to.equal(1);
            counter.dec();
            chai_1.expect(counter.val()).to.equal(0);
            counter.inc(2);
            chai_1.expect(counter.val()).to.equal(2);
            counter.dec(1);
            chai_1.expect(counter.val()).to.equal(1);
            counter.reset();
            chai_1.expect(counter.val()).to.equal(0);
            counter.reset(10);
            chai_1.expect(counter.val()).to.equal(10);
            metric.destroy();
        });
    });
    describe('histogram', () => {
        it('should return undefined if no name provided', () => {
            const metric = new metrics_1.default();
            const histo = metric.histogram({});
            chai_1.expect(histo).to.equal(undefined);
            metric.destroy();
        });
        it('should return undefined if measurement does not exist', () => {
            const metric = new metrics_1.default();
            const histo = metric.histogram({ name: 'test', measurement: 'does not exist' });
            chai_1.expect(histo).to.equal(undefined);
            metric.destroy();
        });
        it('should calculate an histogram', () => {
            const metric = new metrics_1.default();
            const histo = metric.histogram({
                name: 'latency',
                measurement: 'mean'
            });
            if (!histo) {
                chai_1.assert.fail();
                return;
            }
            chai_1.expect(histo.val()).to.equal(0);
            histo.update(10);
            chai_1.expect(histo.val()).to.equal(10);
            histo.update(1);
            chai_1.expect(histo.val()).to.equal(5.5);
            const res = histo.fullResults();
            chai_1.expect(res.min).to.equal(1);
            chai_1.expect(res.max).to.equal(10);
            chai_1.expect(res.sum).to.equal(11);
            chai_1.expect(res.variance).to.equal(40.5);
            chai_1.expect(res.mean).to.equal(5.5);
            chai_1.expect(res.count).to.equal(2);
            chai_1.expect(res.median).to.equal(5.5);
            chai_1.expect(res.p75).to.equal(10);
            chai_1.expect(res.p95).to.equal(10);
            chai_1.expect(res.p99).to.equal(10);
            chai_1.expect(res.p999).to.equal(10);
            chai_1.expect(res.ema).to.equal(4.000000000000001);
            metric.destroy();
        });
        it('should calculate an histogram and getters', () => {
            const metric = new metrics_1.default();
            const histo = metric.histogram({
                name: 'latency',
                measurement: 'max'
            });
            if (!histo) {
                chai_1.assert.fail();
                return;
            }
            chai_1.expect(histo.val()).to.equal(undefined);
            histo.update(10);
            histo.update(1);
            chai_1.expect(histo.val()).to.equal(10);
            chai_1.expect(histo.getMin()).to.equal(1);
            chai_1.expect(histo.getMax()).to.equal(10);
            chai_1.expect(histo.getCount()).to.equal(2);
            chai_1.expect(histo.getSum()).to.equal(11);
            metric.destroy();
        });
        it('should calculate an histogram : mean', () => {
            const metric = new metrics_1.default();
            const histo = metric.histogram({
                name: 'latency',
                measurement: 'mean'
            });
            if (!histo) {
                chai_1.assert.fail();
                return;
            }
            chai_1.expect(histo.val()).to.equal(0);
            histo.update(10);
            chai_1.expect(histo.val()).to.equal(10);
            metric.destroy();
        });
        it('should calculate an histogram : median', () => {
            const metric = new metrics_1.default();
            const histo = metric.histogram({
                name: 'latency',
                measurement: 'median'
            });
            if (!histo) {
                chai_1.assert.fail();
                return;
            }
            chai_1.expect(histo.val()).to.equal(null);
            histo.update(10);
            chai_1.expect(histo.val()).to.equal(10);
            metric.destroy();
        });
    });
    describe('metric', () => {
        it('should return undefined if no name provided', () => {
            const metrics = new metrics_1.default();
            const metric = metrics.metric({});
            chai_1.expect(metric).to.equal(undefined);
            metrics.destroy();
        });
        it('should create a metric and and fail cause no name', () => {
            const metrics = new metrics_1.default();
            let metric = metrics.metric({});
            chai_1.expect(metric).to.equal(undefined);
            metrics.destroy();
        });
        it('should create a metric and use it', () => {
            const metrics = new metrics_1.default();
            let metric = metrics.metric({
                name: 'test'
            });
            chai_1.expect(metric.val()).to.equal(0);
            metric.set(1);
            chai_1.expect(metric.val()).to.equal(1);
            let vars = metrics._getVar();
            chai_1.expect(vars.get('test').unit).to.equal(undefined);
            chai_1.expect(vars.get('test').agg_type).to.equal('avg');
            chai_1.expect(vars.get('test').historic).to.equal(true);
            chai_1.expect(vars.get('test').type).to.equal('test');
            metric = metrics.metric({
                name: 'test',
                type: 'type',
                agg_type: 'sum',
                historic: false,
                unit: 'unit'
            });
            vars = metrics._getVar();
            chai_1.expect(vars.get('test').unit).to.equal('unit');
            chai_1.expect(vars.get('test').agg_type).to.equal('sum');
            chai_1.expect(vars.get('test').historic).to.equal(false);
            chai_1.expect(vars.get('test').type).to.equal('type');
            metric = metrics.metric({
                name: 'test',
                historic: true
            });
            vars = metrics._getVar();
            chai_1.expect(vars.get('test').historic).to.equal(true);
            metric = metrics.metric({
                name: 'test',
                historic: true,
                value: function () {
                    return 'test is real !';
                }
            });
            chai_1.expect(metric.val()).to.equal('test is real !');
            metrics.destroy();
        });
    });
    describe('metric', function () {
        this.timeout(5000);
        it('should not send data until value is higher than 0', (done) => {
            const child = child_process_1.fork(utils_1.default.buildTestPath('fixtures/features/metricsSendChild.js'));
            child.on('message', pck => {
                chai_1.expect(pck.data.testSend.value).to.equal(1);
                child.kill('SIGINT');
                done();
            });
        });
    });
    describe('transpose', () => {
        it('should return undefined if no name provided', () => {
            const metric = new metrics_1.default();
            const transpose = metric.transpose({
                name: 'toto',
                data: null
            });
            chai_1.expect(transpose).to.equal(undefined);
            metric.destroy();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,