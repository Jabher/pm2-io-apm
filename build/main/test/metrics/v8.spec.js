"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const utils_1 = require("../fixtures/utils");
const child_process_1 = require("child_process");
const semver = require("semver");
function checkDefaultValue(pck) {
    chai_1.expect(pck.data.hasOwnProperty('New space used size')).to.equal(true);
    chai_1.expect(pck.data.hasOwnProperty('Old space used size')).to.equal(true);
    chai_1.expect(pck.data.hasOwnProperty('Map space used size')).to.equal(true);
    chai_1.expect(pck.data.hasOwnProperty('Code space used size')).to.equal(true);
    chai_1.expect(pck.data.hasOwnProperty('Heap size')).to.equal(true);
    chai_1.expect(pck.data.hasOwnProperty('Heap size executable')).to.equal(true);
    chai_1.expect(pck.data.hasOwnProperty('Used heap size')).to.equal(true);
    chai_1.expect(pck.data.hasOwnProperty('Heap size limit')).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['New space used size'].value)).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['Old space used size'].value)).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['Map space used size'].value)).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['Code space used size'].value)).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['Heap size'].value)).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['Heap size executable'].value)).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['Used heap size'].value)).to.equal(true);
    chai_1.expect(Number.isInteger(pck.data['Heap size limit'].value)).to.equal(true);
}
describe('V8', function () {
    this.timeout(5000);
    it('should send all data with v8 heap info', (done) => {
        const child = child_process_1.fork(utils_1.default.buildTestPath('fixtures/metrics/v8Child.js'));
        child.on('message', pck => {
            if (pck.type === 'axm:monitor') {
                checkDefaultValue(pck);
                chai_1.expect(pck.data.hasOwnProperty('Heap physical size')).to.equal(true);
                if (semver.satisfies(process.version, '>= 7.2.0')) {
                    chai_1.expect(pck.data.hasOwnProperty('Malloced memory')).to.equal(true);
                    chai_1.expect(pck.data.hasOwnProperty('Peak malloced memory')).to.equal(true);
                }
                chai_1.expect(pck.data.hasOwnProperty('Heap available size')).to.equal(true);
                child.kill('SIGINT');
                done();
            }
        });
    });
    it('should send default data with v8 heap info', (done) => {
        const child = child_process_1.fork(utils_1.default.buildTestPath('fixtures/metrics/v8DefaultChild.js'));
        child.on('message', pck => {
            if (pck.type === 'axm:monitor') {
                chai_1.expect(Object.keys(pck.data).length).to.equal(8);
                checkDefaultValue(pck);
                child.kill('SIGINT');
                done();
            }
        });
    });
    it('should send only some data, according to config', (done) => {
        const child = child_process_1.fork(utils_1.default.buildTestPath('fixtures/metrics/v8SomeDataChild.js'));
        child.on('message', pck => {
            if (pck.type === 'axm:monitor') {
                chai_1.expect(pck.data.hasOwnProperty('New space used size')).to.equal(true);
                chai_1.expect(pck.data.hasOwnProperty('Old space used size')).to.equal(false);
                chai_1.expect(pck.data.hasOwnProperty('Map space used size')).to.equal(false);
                chai_1.expect(pck.data.hasOwnProperty('Code space used size')).to.equal(false);
                chai_1.expect(pck.data.hasOwnProperty('Heap physical size')).to.equal(true);
                chai_1.expect(pck.data.hasOwnProperty('Heap size')).to.equal(false);
                chai_1.expect(pck.data.hasOwnProperty('Heap size executable')).to.equal(false);
                chai_1.expect(pck.data.hasOwnProperty('Used heap size')).to.equal(false);
                chai_1.expect(pck.data.hasOwnProperty('Heap size limit')).to.equal(true);
                chai_1.expect(Number.isInteger(pck.data['New space used size'].value)).to.equal(true);
                chai_1.expect(Number.isInteger(pck.data['Heap physical size'].value)).to.equal(true);
                chai_1.expect(Number.isInteger(pck.data['Heap size limit'].value)).to.equal(true);
                child.kill('SIGINT');
                done();
            }
        });
    });
});
describe('GC', function () {
    this.timeout(50000);
    before(function (done) {
        child_process_1.exec('npm install gc-stats', function (err) {
            chai_1.expect(err).to.equal(null);
            setTimeout(done, 1000);
        });
    });
    after(function (done) {
        child_process_1.exec('npm uninstall gc-stats', function (err) {
            chai_1.expect(err).to.equal(null);
            done();
        });
    });
    it('should get GC stats', (done) => {
        const child = child_process_1.fork(utils_1.default.buildTestPath('fixtures/metrics/v8Child.js'));
        child.on('message', pck => {
            if (pck.type === 'axm:monitor') {
                chai_1.expect(pck.data.hasOwnProperty('GC Heap size')).to.equal(true);
                chai_1.expect(pck.data.hasOwnProperty('GC Executable heap size')).to.equal(true);
                chai_1.expect(pck.data.hasOwnProperty('GC Used heap size')).to.equal(true);
                chai_1.expect(pck.data.hasOwnProperty('GC Type')).to.equal(true);
                chai_1.expect(pck.data.hasOwnProperty('GC Pause')).to.equal(true);
                child.kill('SIGINT');
                done();
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,